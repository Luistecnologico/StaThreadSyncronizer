<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StaThreadSyncronizer</name>
    </assembly>
    <members>
        <member name="T:StaThreadSyncronizer.BlockingQueue`1">
            <summary>
            Queue to queue up work items from thread X to my STA thread
            and dequeue items only when there are items in the queue.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:StaThreadSyncronizer.BlockingQueue`1.#ctor">
            <summary>
            Constructor of Blocking Queue
            </summary>
        </member>
        <member name="M:StaThreadSyncronizer.BlockingQueue`1.Enqueue(`0)">
            <summary>
            add an available resource to the semaphore,
            because we just put an item
            into the queue.
            </summary>
            <param name="data">Item that will be stored into the Queue</param>
        </member>
        <member name="M:StaThreadSyncronizer.BlockingQueue`1.Dequeue">
            <summary>
            Wait until something pops into the queue and return the Next Item to launch.
            </summary>
            <returns>return Next SendOrPostCallbackItem</returns>
        </member>
        <member name="M:StaThreadSyncronizer.BlockingQueue`1.Dequeue(`0)">
            <summary>
            Remove from the queue a specific item
            </summary>
            <param name="item">Item that will be removed</param>
            <returns>Return a default T value. This is for congruence within the system.</returns>
        </member>
        <member name="M:StaThreadSyncronizer.BlockingQueue`1.ReleaseReader">
            <summary>
            Kill (stop) the Reader class (and, so, its threaders) when context class is disposed.
            </summary>
        </member>
        <member name="M:StaThreadSyncronizer.BlockingQueue`1.System#IDisposable#Dispose">
            <summary>
            When this class is disposed, close Semaphore (to not accept new requests) and clear the Queue.
            </summary>
        </member>
        <member name="T:StaThreadSyncronizer.ExecutionType">
            <summary>
            Executing the delegate in two possible modes: Send and Post
            </summary>
        </member>
        <member name="T:StaThreadSyncronizer.SendOrPostCallbackItem">
            <summary>
            Contains the delegate we wish to execute on the STA thread
            </summary>
        </member>
        <member name="M:StaThreadSyncronizer.SendOrPostCallbackItem.#ctor(System.Threading.SendOrPostCallback,System.Object,StaThreadSyncronizer.ExecutionType)">
            <summary>
            Delegate we wish to execute
            </summary>
            <param name="callback">To do method</param>
            <param name="state">Parameters of the over method</param>
            <param name="type">Delegate running mode: Send or Post</param>
        </member>
        <member name="M:StaThreadSyncronizer.SendOrPostCallbackItem.Execute">
            <summary>
            this code must run ont the STA thread
            </summary>
        </member>
        <member name="M:StaThreadSyncronizer.SendOrPostCallbackItem.Send">
            <summary>
            calling thread will block until mAsyncWaitHanel is set
            </summary>
        </member>
        <member name="M:StaThreadSyncronizer.SendOrPostCallbackItem.Post">
            <summary>
            It just calls the method, no need to notify when it is done, and there is no need to track the exception either.
            <excepction>Unhandle execptions will terminate the STA thread</excepction>
            </summary>
        </member>
        <member name="M:StaThreadSyncronizer.StaThread.#ctor(StaThreadSyncronizer.IQueueReader{StaThreadSyncronizer.SendOrPostCallbackItem})">
            <summary>
            This class takes an interface of type IQueueReader, this is really our blocking queue.
            The thread is being setup as an STA thread.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:StaThreadSyncronizer.StaThread.ManagedThreadId">
            <summary>
            Thread where the code is running
            </summary>
        </member>
        <member name="M:StaThreadSyncronizer.StaThread.Join">
            <summary>
            Joint the STA thread to local thread
            </summary>
        </member>
        <member name="M:StaThreadSyncronizer.StaThread.Run">
            <summary>
            Executing any work items on the Run method means executing them on the STA thread.
            </summary>
        </member>
    </members>
</doc>
